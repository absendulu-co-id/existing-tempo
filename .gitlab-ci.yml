image: docker:20

stages:
  - build
  - push
  - deploy

workflow:
  rules:
    - if: $CI_MERGE_REQUEST_ID
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: always

variables:
  # fill those if you have a proxy in your environment
  http_proxy: ""
  https_proxy: ""
  no_proxy: ""

  REGISTRY_IMAGE: "$CI_REGISTRY/pt-akses-mandiri-indonesia/ab-admin-onpremise"
  IMAGE_TAG: "$REGISTRY_IMAGE:latest"
  IMAGE_TAG_SHA: "$REGISTRY_IMAGE:$CI_COMMIT_SHA"

  # https://gitlab.com/gitlab-org/gitlab-runner/-/issues/4566#note_199261985
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  # See https://github.com/docker-library/docker/pull/166
  DOCKER_TLS_CERTDIR: ""

services:
  - name: docker:dind
    entrypoint: ["env", "-u", "DOCKER_HOST"]
    command: ["dockerd-entrypoint.sh"]

before_script:
  - docker login -u $AMI_REGISTRY_TOKEN_USER -p $AMI_REGISTRY_TOKEN_PASSWORD $CI_REGISTRY

Build:
  stage: build
  script:
    # fetches the latest image (not failing if image is not found)
    - docker pull $IMAGE_TAG || true
    # builds the project, passing proxy variables, and vcs vars for LABEL
    # notice the cache-from, which is going to use the image we just pulled locally
    # the built image is tagged locally with the commit SHA, and then pushed to
    # the GitLab registry
    - >
      docker build
      --pull
      --build-arg http_proxy=$http_proxy
      --build-arg https_proxy=$https_proxy
      --build-arg no_proxy=$no_proxy
      --build-arg VCS_REF=$CI_COMMIT_SHA
      --build-arg VCS_URL=$CI_PROJECT_URL
      --cache-from $IMAGE_TAG
      --tag $IMAGE_TAG_SHA
      .
    - docker push $IMAGE_TAG_SHA

# Here, the goal is to tag the "master" branch as "latest"
Push latest:
  variables:
    # We are just playing with Docker here.
    # We do not need GitLab to clone the source code.
    GIT_STRATEGY: none
  stage: push
  only:
    # Only "master" should be tagged "latest"
    - onpremise
  script:
    # Because we have no guarantee that this job will be picked up by the same runner
    # that built the image in the previous step, we pull it again locally
    - docker pull $IMAGE_TAG_SHA
    # Then we tag it "latest"
    - docker tag $IMAGE_TAG_SHA $IMAGE_TAG
    # Annnd we push it.
    - docker push $IMAGE_TAG

# Finally, the goal here is to Docker tag any Git tag
# GitLab will start a new pipeline everytime a Git tag is created, which is pretty awesome
Push tag:
  variables:
    # Again, we do not need the source code here. Just playing with Docker.
    GIT_STRATEGY: none
  stage: push
  only:
    # We want this job to be run on tags only.
    - tags
  script:
    - docker pull $IMAGE_TAG_SHA
    - docker tag $IMAGE_TAG_SHA $REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
